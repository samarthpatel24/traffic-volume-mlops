name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src/ || echo "Code formatting check completed"
    
    - name: Test data preprocessing
      run: |
        echo "Testing data preprocessing..."
        python -c "
        import sys
        sys.path.append('src')
        from preprocess import load_config, clean_data, feature_engineering
        print('✅ Preprocessing imports successful')
        "
    
    - name: Test model training
      run: |
        echo "Testing model training imports..."
        python -c "
        import sys
        sys.path.append('src')
        from train import load_config, train_random_forest
        print('✅ Training imports successful')
        "
    
    - name: Validate configuration
      run: |
        echo "Validating configuration..."
        python -c "
        import yaml
        with open('config/config.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        required_keys = ['data', 'model', 'training', 'evaluation']
        for key in required_keys:
            assert key in config, f'Missing config key: {key}'
        
        print('✅ Configuration validation passed')
        "

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install safety
      run: |
        pip install safety
    
    - name: Run security scan
      run: |
        safety check -r requirements.txt || echo "Security scan completed with warnings"

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install pip-audit
      run: |
        pip install pip-audit
    
    - name: Run dependency audit
      run: |
        pip-audit -r requirements.txt --format=json --output=audit-report.json || echo "Audit completed"
    
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-report
        path: audit-report.json