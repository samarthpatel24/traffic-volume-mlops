AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Traffic Volume Predictor EC2 instance'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]
    Description: EC2 instance type

Resources:
  TrafficPredictorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Traffic Volume Predictor
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0

  TrafficPredictorInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (change based on region)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref TrafficPredictorSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create app directory
          mkdir -p /opt/traffic-predictor
          cd /opt/traffic-predictor
          
          # Pull and run the application
          docker pull your-dockerhub-username/traffic-volume-predictor:latest
          docker run -d --name traffic-app --restart unless-stopped -p 80:8501 your-dockerhub-username/traffic-volume-predictor:latest

Outputs:
  InstanceId:
    Description: Instance ID of the EC2 instance
    Value: !Ref TrafficPredictorInstance
  
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt TrafficPredictorInstance.PublicIp
  
  ApplicationURL:
    Description: URL to access the Traffic Volume Predictor application
    Value: !Sub 'http://${TrafficPredictorInstance.PublicIp}'